function invokeAfterDelay(func, delay) {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      try {
        let result = func();
        resolve(result);
      } catch (error) {
        reject(error);
      }
    }, delay);
  });
}

// Приклад використання функції invokeAfterDelay для виклику функції, яка повертає випадкове число
let randomPromise = invokeAfterDelay(() => {
  return Math.floor(Math.random() * 11);
}, 2000);

// Обробка результату промісу та виведення в консоль
randomPromise.then((result) => {
  console.log("Випадкове число: " + result);
}).catch((error) => {
  console.error(error);
});


function produceRandomAfterDelay(min, max) {
  return invokeAfterDelay(() => {
    return Math.floor(Math.random() * (max - min + 1)) + min;
  }, 2000);
}

// Виклик функції produceRandomAfterDelay двічі та отримання результатів
let promise1 = produceRandomAfterDelay(1, 10);
let promise2 = produceRandomAfterDelay(11, 20);

// Обробка результатів двох промісів та виведення їх суми у консоль
Promise.all([promise1, promise2]).then((results) => {
  let sum = results.reduce((total, current) => {
    return total + current;
  }, 0);
  console.log("Сума випадкових чисел: " + sum);
}).catch((error) => {
  console.error(error);
});




async function exampleFunction() {
  console.log("Перед затримкою");
  await sleep(1000);
  console.log("Після затримки");
}

exampleFunction();



function getUser(id) {
  let users = [
    { id: 0, name: "Іван", age: 25, city: "Київ" },
    { id: 1, name: "Марія", age: 32, city: "Львів" },
    { id: 2, name: "Олексій", age: 18, city: "Харків" },
    { id: 3, name: "Світлана", age: 27, city: "Одеса" }
  ];

  return new Promise((resolve, reject) => {
    setTimeout(() => {
      let user = users.find(user => user.id === id);
      if (user) {
        resolve(user);
      } else {
        reject("User not found");
      }
    }, 1000);
  });
}

async function exampleFunction() {
  try {
    let user1 = await getUser(0);
    console.log(user1);

    let user2 = await getUser(3);
    console.log(user2);

    let user3 = await getUser(5);
    console.log(user3);
  } catch (error) {
    console.error(error);
  }
}

exampleFunction();





async function loadUsers(ids) {
  let promises = ids.map(id => getUser(id));

  try {
    let users = await Promise.all(promises);
    return users;
  } catch (error) {
    throw error;
  }
}



function logCall(callback) {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      console.log(new Date().toLocaleTimeString());
      callback();
      resolve();
    }, 1000);
  });
}




async function showUsers() {
  console.log("Loading...");
  try {
    const userIds = [0, 1, 2, 3];
    const users = await loadUsers(userIds);
    console.log(users);
  } catch (error) {
    console.error(error);
  } finally {
    console.log("Loading finished.");
  }
}
